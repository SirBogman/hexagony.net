:root {
    --background: #fdfdfd;
    --color:      #343a40;
    --disabled-color: #707070;
    --red: #ed1c24;
    --blue: #1c74bc;
    --orange: #F7941D;
    --hexagon-stroke: #808080;
    --set-memory: black;
    --panel-background: hsl(0, 0%, 95%);
    --output-background: hsl(0, 0%, 83%)
}

body {
    background: var(--background);
    font: 16px emoji,system-ui,-apple-system,sans-serif;
}

.cell {
    fill: white;
    stroke: var(--hexagon-stroke);
    stroke-width: 0.5;
    stroke-miterlimit: 10;
    transition-duration: 0.5s;
    transition-timing-function: ease-out;
}

#puzzle_parent {
    transition-duration: 0.85s;
    transition-timing-function: ease-in-out;
}

.pre {
    white-space: pre;
    font-family: monospace;
}

.pre:after {
    /* Allows user to see a trailing line break. */
    content: '';
}

#sourcecode {
    width: 100%;
    height: 100px;
}

#url_export {
    width: 100%;
}

#input {
    width: 100%;
    height: 100px;
    min-height: 100px;
}

#output_container {
    height: 300px;
}

#output {
    background-color: var(--output-background);
    width: 100%;
    min-height: 1em;
    max-height: 300px;
    padding: 0.5em;
    overflow: auto;
}

#memory {
    width: 500px;
    height: 100px;
}

#puzzle_container {
    position: relative;
    /* overflow: hidden; */
}

#memory_container {
    border: black;
    resize: vertical;
    border-style: solid;
    border-width: 2px;
    width: 100%;
    height: 300px;
    overflow: hidden;
}

.cell_input {
    position: absolute;
    font-size: 20px;
    margin-top: -13px;
    text-align: center;
    outline: none;
    width: 28px;
    margin-left: -14px;
    padding: 0;
    border-width: 0;
    background: none;
    font-family: monospace;
}

.cell_text {
    fill-opacity: 1.0;
    fill: black;
    stroke: none;
    font-size: 20px;
    font-family: monospace;
}

.noop {
    fill: var(--hexagon-stroke);
}

.puzzle {
    position: absolute;
    left:0px;
    top:0px;
}

#input_container {
    position: absolute;
    left:0px;
    top:0px;
}

#app_grid {
    background: #fff;
    transition: all 0.2s;
    display: grid;
    justify-content: center;
    width: calc(100% - 2rem);
    grid-gap: 1rem;
    margin: 1rem;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: auto;
}

.edit_grid {
    grid-template-areas:
        "code input"
        "code import"
        "hotkeys info";
}

.play_grid {
    grid-template-areas:
        "code input"
        "code output"
        "memory state"
        "hotkeys info";
}

@media (max-width: 640px) {
    #app_grid {
        grid-template-columns: 1fr;
    }

    .edit_grid {
        grid-template-areas:
            "code"
            "input"
            "info"
            "import"
            "hotkeys";
    }
    
    .play_grid {
        grid-template-areas:
            "code"
            "output"
            "memory"
            "state"
            "input"
            "info"
            "hotkeys";
    }
}

#app_grid > div {
    overflow: hidden;
    background: var(--panel-background);
    padding: 0.5rem;
    min-height: 300px;
}

.outline {
    fill: none;
    stroke: black;
    stroke-width: 1.5;
    stroke-miterlimit: 10;
}

.outline_secondary {
    stroke-width: 0.75;
}

.cell_breakpoint {
    fill: none;
    stroke: var(--red);
    stroke-width: 1.5;
    stroke-miterlimit: 10;
}

.cell_executed {
    fill: hsl(180, 100%, 95%);
}

/* See EXECUTED_COLOR_COUNT */
/* // sass test
$executed_colors: 10;
$executed_max_lightness: 0.93;
$executed_min_lightness: 0.83;
$executed_lightness_increment: ($executed_max_lightness - $executed_min_lightness) / ($executed_colors - 1);

@for $i from $executed_colors through 1 { 
    .cell_executed#{$i} {
        fill: hsl(200, 100%, percentage($executed_min_lightness + ($i - 1) * $executed_lightness_increment));
    }
}
*/

.cell_executed10 {
    fill: hsl(200, 100%, 93%);
}

.cell_executed9 {
    fill: hsl(200, 100%, 92%);
}

.cell_executed8 {
    fill: hsl(200, 100%, 90%);
}

.cell_executed7 {
    fill: hsl(200, 100%, 89%);
}

.cell_executed6 {
    fill: hsl(200, 100%, 88%);
}

.cell_executed5 {
    fill: hsl(200, 100%, 87%);
}

.cell_executed4 {
    fill: hsl(200, 100%, 86%);
}

.cell_executed3 {
    fill: hsl(200, 100%, 85%);
}

.cell_executed2 {
    fill: hsl(200, 100%, 84%);
}

.cell_executed1 {
    fill: hsl(200, 100%, 83%);
}

.cell_active {
    fill: hsl(200, 100%, 50%);
}

.cell_terminated {
    fill: var(--red);
}

.button_container {
    margin: 1em;
}

.connector {
    fill: none;
    stroke: var(--orange);
    /* opacity: 0.75; */
    stroke-width: 1.0;
    stroke-miterlimit: 10;
}

.positive_connector {
    stroke: var(--red);
}

.negative_connector {
    stroke: var(--blue);
}

.positive_text {
    fill: var(--red);
    stroke: none;
    font-size: 20px;
    /* font-weight: bold; */
}

.negative_text {
    fill: var(--blue);
    stroke: none;
    font-size: 20px;
    /* font-weight: bold; */
}

@keyframes connector_flash {
    to {
        stroke-width: 6;
    }
}

.connector_flash {
    animation: connector_flash 0.5s ease-out 0s 2 alternate;
}

.connector_neutral_flash {
    stroke: var(--orange);
    animation: connector_flash 0.5s ease-out 0s 2 alternate;
}

.memory_cell {
    fill: none;
    stroke: var(--hexagon-stroke);
    stroke-width: 0.5;
    stroke-miterlimit: 10;
}

.memory_pointer {
    fill: var(--red);
    stroke: none;
}

.memory_value {
    stroke: var(--set-memory);
    stroke-width: 1.0;
}

.memory_text {
    font-size: 12px;
}

/* #memory_svg {
    position: absolute;
    left:0px;
    top:0px;
} */

#code_panel {
    grid-area: code;
    display: flex;
    justify-content: center;
    align-items: center;
}

#input_panel {
    grid-area: input;
}

#output_panel {
    grid-area: output;
}

#import_panel {
    grid-area: import;
}

#state_panel {
    grid-area: state;
}

#memory_panel {
    grid-area: memory;
    overflow: hidden;
}

#info_panel {
    grid-area: info;
}

#hotkeys_panel {
    grid-area: hotkeys;
}

.hidden_section {
    display: none;
}

.edit_button {
    margin: 0.5rem 0.5rem 0.5rem 0;
}

.radio label {
    margin-right: 0.5rem;
}

.radio label input {
    margin: 8px 4px 8px 0px;
}

td {
    padding: 0 0.5rem;
}

#termination_reason {
    font-weight: bold;
    color: var(--red);
}
