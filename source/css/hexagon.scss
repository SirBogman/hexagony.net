@use 'sass:color';
@use 'root.scss';

.cellPath {
    fill: var(--hexagon-fill);
    stroke: var(--hexagon-stroke);
    stroke-width: 0.5;
    transition-timing-function: ease-out;
}

.cellInput {
    font-size: 20px;
    text-align: center;
    outline: none;
    padding: 0;
    border-width: 0;
    background: none;
    font-family: root.$monospace;
}

.cellText {
    fill: var(--text-color);
    stroke: none;
    font-size: 20px;
    font-family: root.$monospace;
}

.noop {
    fill: var(--hexagon-stroke);
}

.outline {
    fill: none;
    stroke: var(--outline-color);
    stroke-width: 1.5;
}

.outlineSecondary {
    stroke-width: 0.75;
}

.cellBreakpoint {
    fill: none;
    stroke: var(--red);
    stroke-width: 1.5;
}

.cellExecutedArrow {
    animation: fadeIn ease-out;
    stroke: none;
    fill: rgba(0, 0, 0, 0);
    transition-property: fill;
}

$arrowLightnessShift: -50%;
$executeLightnessShift: 90%;
$secondaryLightnessShift: 75%;

@function scaleLightness($color, $amount) {
    // Example:
    // color.scale(hsl(0, 100%, 70%), $lightness: 50%) == hsl(0, 100%, 85%)
    @return color.scale($color, $lightness: $amount);
}

@function makeSecondaryColor($color) {
    @return scaleLightness($color, $secondaryLightnessShift);
}

@function makeArrowColor($color) {
    @return scaleLightness($color, $arrowLightnessShift);
}

// This should match executedColorCount in gridview.mjs.
$executedColorCount: 10;
$executedMinLightness: 66%;
$executedMaxLightness: 88%;
$executedLightnessIncrement: ($executedMaxLightness - $executedMinLightness) / ($executedColorCount - 1);

$colors:
    hsl(200, 100%, 50%)
    hsl(270, 100%, 70%)
    hsl(0, 100%, 70%)
    hsl(30, 100%, 50%)
    hsl(60, 90%, 50%)
    hsl(140, 80%, 50%)
;

@for $j from 5 through 0 {
    $color: nth($colors, $j + 1);
    $executedColor: scaleLightness($color, $executeLightnessShift);

    .colorSwatch#{$j} {
        display: inline-block;
        margin: 0 0.5rem;
        border: 1px solid var(--color);
        background: $color;
        width: 0.8rem;
        height: 0.8rem;
    }

    .arrowExecuted#{$j} {
        fill: makeArrowColor($executedColor);
    }

    .cellExecuted#{$j} {
        fill: $executedColor;
    }

    @for $i from $executedColorCount - 1 through 0 {
        $value: $executedMinLightness + $i * $executedLightnessIncrement;
        $currentColor: scaleLightness($color, $value);
        @debug $j $i $value color.hue($currentColor) color.saturation($currentColor) color.lightness($currentColor) color.blackness($currentColor);

        .arrowExecuted#{$j}_#{$i} {
            fill: makeArrowColor($currentColor);
        }

        .cellExecuted#{$j}_#{$i} {
            fill: $currentColor;
        }
    }
}

// The active/inactive colors are generated in a separate loop so they always have higher priority.
@for $j from 5 through 0 {
    $color: nth($colors, $j + 1);
    $inactiveColor: scaleLightness($color, $executedMinLightness);

    .arrowInactive#{$j} {
        fill: makeArrowColor($inactiveColor);
    }

    .cellInactive#{$j} {
        fill: $inactiveColor;
    }

    .arrowActive#{$j} {
        fill: makeArrowColor($color);
    }

    .cellActive#{$j} {
        fill: $color;
    }

    .cellActive#{$j}Secondary {
        fill: makeSecondaryColor($color);
    }
}

.connector {
    fill: none;
    stroke: var(--orange);
    stroke-width: 1.0;
}

.positiveConnector > path {
    stroke: var(--red);
}

.negativeConnector > path {
    stroke: var(--blue);
}

.positiveText {
    fill: var(--red);
    font-size: 20px;
}

.negativeText {
    fill: var(--blue);
    font-size: 20px;
}

@keyframes connectorFlash {
    to {
        stroke-width: 6;
    }
}

@keyframes connectorFlashSecondary {
    to {
        stroke-width: 4;
    }
}

path.connectorFlash {
    animation: connectorFlash 0.5s ease-out 0s 2 alternate;
}

path.connectorNeutralFlash {
    stroke: var(--orange);
    animation: connectorFlash 0.5s ease-out 0s 2 alternate;
}

path.connectorFlashSecondary {
    animation: connectorFlashSecondary 0.5s ease-out 0s 2 alternate;
}

path.connectorNeutralFlashSecondary {
    stroke: var(--orange);
    animation: connectorFlashSecondary 0.5s ease-out 0s 2 alternate;
}

.activeIp {
    font-weight: bold;
}
