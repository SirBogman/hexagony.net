@use 'sass:color';
@use 'root.scss';

.cell {
    fill: white;
    stroke: var(--hexagon-stroke);
    stroke-width: 0.5;
    stroke-miterlimit: 10;
    transition-duration: 0.5s;
    transition-timing-function: ease-out;
}

.cell_input {
    position: absolute;
    font-size: 20px;
    margin-top: -13px;
    text-align: center;
    outline: none;
    width: 28px;
    margin-left: -14px;
    padding: 0;
    border-width: 0;
    background: none;
    font-family: root.$monospace;
}

.cell_text {
    fill: black;
    stroke: none;
    font-size: 20px;
    font-family: root.$monospace;
}

.noop {
    fill: var(--hexagon-stroke);
}

.outline {
    fill: none;
    stroke: black;
    stroke-width: 1.5;
    stroke-miterlimit: 10;
}

.outline_secondary {
    stroke-width: 0.75;
}

.cell_breakpoint {
    fill: none;
    stroke: var(--red);
    stroke-width: 1.5;
    stroke-miterlimit: 10;
}

$arrow_lightness_shift: 0.2;
$executed_lightness: 0.95;
$active_ligtness: 0.50;

@function lightenColor($c) {
    @return mix($c, white, 25%);
}

.arrow_executed {
    fill: hsl(200, 100%, percentage($executed_lightness - $arrow_lightness_shift));
    stroke: none;
}

.cell_executed {
    fill: hsl(180, 100%, percentage($executed_lightness));
}

.cell_executed.secondary {
    fill: lightenColor(hsl(180, 100%, percentage($executed_lightness)));
}

$executed_colors: 10;
$executed_max_lightness: 0.93;
$executed_min_lightness: 0.83;
$executed_lightness_increment: ($executed_max_lightness - $executed_min_lightness) / ($executed_colors - 1);

@for $i from $executed_colors through 1 {
    $value: $executed_min_lightness + ($i - 1) * $executed_lightness_increment;

    .arrow_executed#{$i} {
        fill: hsl(200, 100%, percentage($value - $arrow_lightness_shift));
    }

    .cell_executed#{$i} {
        fill: hsl(200, 100%, percentage($value));
    }

    .cell_executed#{$i}.secondary {
        fill: lightenColor(hsl(200, 100%, percentage($value)));
    }
}

.arrow_active {
    fill: hsl(200, 100%, percentage($active_ligtness - $arrow_lightness_shift));
}

.cell_active {
    fill: hsl(200, 100%, percentage($active_ligtness));
}

.cell_active.secondary {
    fill: lightenColor(hsl(200, 100%, percentage($active_ligtness)));
}

.cell_terminated {
    fill: var(--red);
}

.cell_terminated.secondary {
    fill: lightenColor(root.$red);
}

.connector {
    fill: none;
    stroke: var(--orange);
    stroke-width: 1.0;
    stroke-miterlimit: 10;
}

.positive_connector {
    stroke: var(--red);
}

.negative_connector {
    stroke: var(--blue);
}

.positive_text {
    fill: var(--red);
    stroke: none;
    font-size: 20px;
}

.negative_text {
    fill: var(--blue);
    stroke: none;
    font-size: 20px;
}

@keyframes connector_flash {
    to {
        stroke-width: 6;
    }
}

.connector_flash {
    animation: connector_flash 0.5s ease-out 0s 2 alternate;
}

.connector_neutral_flash {
    stroke: var(--orange);
    animation: connector_flash 0.5s ease-out 0s 2 alternate;
}
