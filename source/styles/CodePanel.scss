@use 'root.scss';

// Specificity should be at least (1, 1, 1), because it must be at least as high as "#appGrid > div.appPanel".
div #codePanel.appPanel {
    position: relative;
    grid-area: codePanel;
    // This number is a bit arbitrary. It prevents the layout from changing too much when switching
    // from edit to play mode.
    min-height: 585px;
    display: flex;
    padding: 0;

    // Allow horizontal scrolling, if necessary. Content will not overflow vertically, because the container will
    // expand.
    overflow-x: auto;
}

.codePanelHeader {
    position: absolute;
    left: 0px;
    top: 0px;
    z-index: 1;
    background: var(--panel-overlay-background);
    display: flex;
    padding: 0.5rem;
}

#resetCodeViewButton {
    margin: 0.5rem;
}

#codeSvgContainer {
    // Using auto horizontal margin works the same way as putting "justify-content: safe center;" on the container,
    // except that isn't widely supported at this time. If "justify-content: center;" is used on the container, and this
    // element is too big to fit, then content at the left side is inaccessible.
    margin: 0 auto;
    // When the content is smaller than the container, center it vertically. The Container is always at least as large
    // as the content.
    align-self: center;
}

@media (max-width: root.$singleColumnWidth) {
    // Specificity should be at least (1, 1, 1), because it must be at least as high as "div #codePanel.appPanel".
    div #codePanel.appPanel {
        // Use the height of the content.
        min-height: 0px;
    }
}
