@use 'root.scss';

body header {
    position: sticky;
    top: 0;
    // Above some code panel stuff at z-index: 1;
    z-index: 2;
}

div.pre {
    white-space: pre;
    font-family: root.$monospace;
}

div.pre:after {
    // Allows user to see a trailing line break.
    // For Chrome and Safari, this cannot be an empty string.
    content: ' ';
}

#appGrid {
    background: var(--background);
    display: grid;
    justify-content: center;
    grid-gap: 1rem;
    grid-template-columns: 1fr 1fr 1fr;
    grid-template-rows: auto auto 1fr auto;
    // To fit the application to the vertical height:
    // height: 100vh;
}

.editGrid {
    grid-template-areas:
        "header header header"
        "codePanel codePanel hotkeysPanel"
        "codePanel codePanel importExportPanel"
        "inputPanel inputPanel infoPanel";
}

.playGrid {
    grid-template-areas:
        "header header header"
        "codePanel codePanel memoryPanel"
        "codePanel codePanel memoryPanel"
        "inputPanel outputPanel statePanel";
}

header {
    grid-area: header;
}

#appGrid > div.appPanel {
    background: var(--panel-background);
    padding: 0.5rem;
    // Overflow must be hidden in all panels to prevent horizontal scroll bars in the narrow layout.
    overflow: hidden;
    color: var(--foreground-color);
}

#inputPanel {
    grid-area: inputPanel;
    display: grid;
    grid-template-rows: auto 1fr;
}

div #outputPanel {
    grid-area: outputPanel;
    display: grid;
    grid-template-rows: auto 1fr;
}

#outputContainer {
    position: relative;
}

#outputBox {
    background-color: var(--output-background);
    max-height: 100%;
    padding: 0.5em;
    position: absolute;
    overflow: auto;
    width: 100%;
}

div #importExportPanel {
    grid-area: importExportPanel;
    display: grid;
    grid-template-rows: auto auto 1fr;
}

textarea {
    resize: vertical;
}

#outputPanel, #inputPanel, #statePanel, #infoPanel {
    min-height: 200px;
}

#infoPanel {
    grid-area: infoPanel;
}

#hotkeysPanel {
    grid-area: hotkeysPanel;
}

.editButton {
    margin: 0.5rem 0.5rem 0.5rem 0;
}

.bodyButton {
    color: var(--text-color);
    background: var(--button);
}

.bodyButton:disabled {
    color: var(--disabled-color);
}

@media (hover: hover) {
    .bodyButton:hover:not(:disabled) {
        background: var(--hover-button);
    }
}

.bodyButton:active:not(:disabled) {
    background: var(--active-button);
}

#inputBox, #outputContainer {
    grid-column: 1/3;
}

.radio {
    align-self: flex-end;
    justify-self: end;
    grid-column: 2;
}

.radio label {
    margin-right: 0.5rem;
}

.radio label input {
    margin: 8px 4px 8px 0px;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

#infoInfo, #hotkeysGrid {
    display: inline-grid;
    column-gap: 1rem;
}

textarea {
    background: var(--background);
    border: none;
    color: var(--text-color);
    font-family: root.$monospace;
}

.inputBox {
    background: var(--background);
    border: none;
    color: var(--text-color);
}

.col1 {
    grid-column: 1;
}

.col2 {
    grid-column: 2;
}

.col3 {
    grid-column: 3;
}

.col4 {
    grid-column: 4;
}

.col5 {
    grid-column: 5;
}

.right {
    justify-self: right;
}

@media (max-width: root.$singleColumnWidth) {
    #appGrid {
        grid-template-columns: 1fr;
    }

    .editGrid {
        grid-template-columns: 1fr;
        grid-template-areas:
            "header"
            "codePanel"
            "inputPanel"
            "importExportPanel"
            "infoPanel"
            "hotkeysPanel";
    }

    .playGrid {
        grid-template-columns: 1fr;
        grid-template-areas:
            "header"
            "codePanel"
            "memoryPanel"
            "outputPanel"
            "inputPanel"
            "statePanel";
    }
}
